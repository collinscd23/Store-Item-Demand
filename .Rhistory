filter(store == 3, item == 23)
storeItemTest_1 <- test %>%
filter(store == 3, item == 23)
storeItemTrain_2 <- train %>%
filter(store == 9, item == 47)
storeItemTest_2 <- test %>%
filter(store == 9, item == 47)
# Function to prepare data, fit ARIMA, and generate forecasts
fit_forecast_arima <- function(train_data, test_data) {
# Time split
split <- initial_time_split(train_data, prop = 0.8)
# Recipe
arima_recipe <- recipe(sales ~ ., data = training(split)) %>%
step_rm(item, store) %>%
step_date(date, features = c("doy", "decimal")) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy)) %>%
step_rm(date_doy)
# ARIMA model
arima_model <- arima_reg() %>%
set_engine("auto_arima")
# Workflow
arima_wf <- workflow() %>%
add_recipe(arima_recipe) %>%
add_model(arima_model) %>%
fit(data = training(split))
# Cross-validation
cv_results <- modeltime_calibrate(
arima_wf,
new_data = testing(split)
)
# Refit to the whole dataset
full_fit <- cv_results %>%
modeltime_refit(data = train_data)
# Forecast on test data
forecasts <- full_fit %>%
modeltime_forecast(
new_data = test_data,
actual_data = train_data
)
list(cv_results = cv_results, forecasts = forecasts)
}
# Fit and forecast for both store-item combinations
results_1 <- fit_forecast_arima(storeItemTrain_1, storeItemTest_1)
results_2 <- fit_forecast_arima(storeItemTrain_2, storeItemTest_2)
# Generate plots
cv_plot_1 <- results_1$cv_results %>%
modeltime_forecast(
new_data = testing(initial_time_split(storeItemTrain_1, prop = 0.8)),
actual_data = training(initial_time_split(storeItemTrain_1, prop = 0.8))
) %>%
plot_modeltime_forecast() +
ggtitle("Cross-Validation Predictions: Store 3, Item 23")
# Generate plots
cv_plot_1 <- results_1$cv_results %>%
modeltime_forecast(
new_data = testing(initial_time_split(storeItemTrain_1, prop = 0.8)),
actual_data = training(initial_time_split(storeItemTrain_1, prop = 0.8))
) %>%
plot_modeltime_forecast() +
ggtitle("Cross-Validation Predictions: Store 3, Item 23")
forecast_plot_1 <- results_1$forecasts %>%
plot_modeltime_forecast() +
ggtitle("3-Month Forecast: Store 3, Item 23")
cv_plot_2 <- results_2$cv_results %>%
modeltime_forecast(
new_data = testing(initial_time_split(storeItemTrain_2, prop = 0.8)),
actual_data = training(initial_time_split(storeItemTrain_2, prop = 0.8))
) %>%
plot_modeltime_forecast() +
ggtitle("Cross-Validation Predictions: Store 9, Item 47")
forecast_plot_2 <- results_2$forecasts %>%
plot_modeltime_forecast() +
ggtitle("3-Month Forecast: Store 9, Item 47")
# Combine plots in a 4-panel layout
(cv_plot_1 | forecast_plot_1) / (cv_plot_2 | forecast_plot_2)
library(tidyverse)
library(tidymodels)
library(vroom)
library(forecast)
library(patchwork)
library(modeltime)
library(timetk)
# Set working directory
setwd("~/Desktop/Stats348/Store-Item-Demand")
# Load data
train <- vroom("train.csv")
test <- vroom("test.csv")
# Filter for specific store-item combinations
storeItemTrain_1 <- train %>%
filter(store == 3, item == 23)
storeItemTest_1 <- test %>%
filter(store == 3, item == 23)
storeItemTrain_2 <- train %>%
filter(store == 9, item == 47)
storeItemTest_2 <- test %>%
filter(store == 9, item == 47)
# Function to prepare data, fit ARIMA, and generate forecasts
fit_forecast_arima <- function(train_data, test_data) {
# Time split
split <- initial_time_split(train_data, prop = 0.8)
# Recipe
arima_recipe <- recipe(sales ~ ., data = training(split)) %>%
step_rm(item, store) %>%
step_date(date, features = c("doy", "decimal")) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy)) %>%
step_rm(date_doy)
# ARIMA model
arima_model <- arima_reg() %>%
set_engine("auto_arima")
# Workflow
arima_wf <- workflow() %>%
add_recipe(arima_recipe) %>%
add_model(arima_model) %>%
fit(data = training(split))
# Cross-validation
cv_results <- modeltime_calibrate(
arima_wf,
new_data = testing(split)
)
# Refit to the whole dataset
full_fit <- cv_results %>%
modeltime_refit(data = train_data)
# Forecast on test data
forecasts <- full_fit %>%
modeltime_forecast(
new_data = test_data,
actual_data = train_data
)
list(cv_results = cv_results, forecasts = forecasts)
}
# Fit and forecast for both store-item combinations
results_1 <- fit_forecast_arima(storeItemTrain_1, storeItemTest_1)
results_2 <- fit_forecast_arima(storeItemTrain_2, storeItemTest_2)
# Cross-validation plot for Store 3, Item 23
cv_split_1 <- initial_time_split(storeItemTrain_1, prop = 0.8)
cv_plot_1 <- results_1$cv_results %>%
modeltime_forecast(
new_data = testing(cv_split_1),
actual_data = training(cv_split_1)
) %>%
plot_modeltime_forecast(.interactive = FALSE) +
ggtitle("Cross-Validation Predictions: Store 3, Item 23")
# Cross-validation plot for Store 9, Item 47
cv_split_2 <- initial_time_split(storeItemTrain_2, prop = 0.8)
cv_plot_2 <- results_2$cv_results %>%
modeltime_forecast(
new_data = testing(cv_split_2),
actual_data = training(cv_split_2)
) %>%
plot_modeltime_forecast(.interactive = FALSE) +
ggtitle("Cross-Validation Predictions: Store 9, Item 47")
# Forecast plot for Store 3, Item 23
forecast_plot_1 <- results_1$forecasts %>%
plot_modeltime_forecast(.interactive = FALSE) +
ggtitle("3-Month Forecast: Store 3, Item 23")
# Forecast plot for Store 9, Item 47
forecast_plot_2 <- results_2$forecasts %>%
plot_modeltime_forecast(.interactive = FALSE) +
ggtitle("3-Month Forecast: Store 9, Item 47")
# Combine plots in a 4-panel layout
(cv_plot_1 | forecast_plot_1) / (cv_plot_2 | forecast_plot_2)
library(tidyverse)
library(tidymodels)
library(vroom)
library(forecast)
library(patchwork)
library(modeltime)
library(timetk)
# Set working directory
setwd("~/Desktop/Stats348/Store-Item-Demand")
# Load data
train <- vroom("train.csv")
test <- vroom("test.csv")
# Filter for specific store-item combinations
storeItemTrain_1 <- train %>%
filter(store == 3, item == 23)
storeItemTest_1 <- test %>%
filter(store == 3, item == 23)
storeItemTrain_2 <- train %>%
filter(store == 9, item == 47)
storeItemTest_2 <- test %>%
filter(store == 9, item == 47)
# Function to prepare data, fit ARIMA, and generate forecasts
fit_forecast_arima <- function(train_data, test_data) {
# Time split
split <- initial_time_split(train_data, prop = 0.8)
# Recipe
arima_recipe <- recipe(sales ~ ., data = training(split)) %>%
step_rm(item, store) %>%
step_date(date, features = c("doy", "decimal")) %>%
step_mutate(sinDOY = sin(date_doy), cosDOY = cos(date_doy)) %>%
step_rm(date_doy)
# ARIMA model
arima_model <- arima_reg() %>%
set_engine("auto_arima")
# Workflow
arima_wf <- workflow() %>%
add_recipe(arima_recipe) %>%
add_model(arima_model) %>%
fit(data = training(split))
# Cross-validation
cv_results <- modeltime_calibrate(
arima_wf,
new_data = testing(split)
)
# Refit to the whole dataset
full_fit <- cv_results %>%
modeltime_refit(data = train_data)
# Forecast on test data
forecasts <- full_fit %>%
modeltime_forecast(
new_data = test_data,
actual_data = train_data
)
list(cv_results = cv_results, forecasts = forecasts, split = split)
}
# Fit and forecast for both store-item combinations
results_1 <- fit_forecast_arima(storeItemTrain_1, storeItemTest_1)
results_2 <- fit_forecast_arima(storeItemTrain_2, storeItemTest_2)
# Cross-validation plot for Store 3, Item 23
cv_plot_1 <- results_1$cv_results %>%
modeltime_forecast(
new_data = testing(results_1$split),
actual_data = training(results_1$split)
) %>%
plot_modeltime_forecast(.interactive = FALSE) +
ggtitle("Cross-Validation Predictions: Store 3, Item 23")
# Cross-validation plot for Store 9, Item 47
cv_plot_2 <- results_2$cv_results %>%
modeltime_forecast(
new_data = testing(results_2$split),
actual_data = training(results_2$split)
) %>%
plot_modeltime_forecast(.interactive = FALSE) +
ggtitle("Cross-Validation Predictions: Store 9, Item 47")
# Forecast plot for Store 3, Item 23
forecast_plot_1 <- results_1$forecasts %>%
plot_modeltime_forecast(.interactive = FALSE) +
ggtitle("3-Month Forecast: Store 3, Item 23")
# Forecast plot for Store 9, Item 47
forecast_plot_2 <- results_2$forecasts %>%
plot_modeltime_forecast(.interactive = FALSE) +
ggtitle("3-Month Forecast: Store 9, Item 47")
# Combine plots in a 4-panel layout
final_plot <- (cv_plot_1 | forecast_plot_1) / (cv_plot_2 | forecast_plot_2)
print(final_plot)
# Combine plots in a 4-panel layout
final_plot <- (cv_plot_1 | forecast_plot_1) / (cv_plot_2 | forecast_plot_2)
print(final_plot)
library(tidyverse)
library(tidymodels)
library(vroom)
library(modeltime)
library(timetk)
library(patchwork)
setwd("~/Desktop/Stats348/Store-Item-Demand")
train <- vroom("train.csv")
test <- vroom("test.csv")
storeItemTrain_1 <- train %>% filter(store == 3, item == 23)
storeItemTest_1 <- test %>% filter(store == 3, item == 23)
storeItemTrain_2 <- train %>% filter(store == 9, item == 47)
storeItemTest_2 <- test %>% filter(store == 9, item == 47)
storeItemTrain_1 <- storeItemTrain_1 %>% mutate(date = as.Date(date))
storeItemTrain_2 <- storeItemTrain_2 %>% mutate(date = as.Date(date))
prophet_model <- prophet_reg() %>%
set_engine("prophet") %>%
set_mode("regression")
cv_plan_1 <- time_series_cv(
data = storeItemTrain_1,
initial = "3 years",
assess = "3 months",
skip = "1 month",
cumulative = TRUE
)
cv_plan_2 <- time_series_cv(
data = storeItemTrain_2,
initial = "3 years",
assess = "3 months",
skip = "1 month",
cumulative = TRUE
)
# For store-item 1
workflow_1 <- workflow() %>%
add_model(prophet_model) %>%
add_formula(y ~ date) %>%
fit_resamples(cv_plan_1)
# For store-item 2
workflow_2 <- workflow() %>%
add_model(prophet_model) %>%
add_formula(y ~ date) %>%
fit_resamples(cv_plan_2)
names(storeItemTrain_1)
names(storeItemTrain_2)
# Load Necessary Libraries
library(tidyverse)
library(tidymodels)
library(vroom)
library(modeltime)
library(timetk)
library(patchwork)
# Set Working Directory and Load Data
setwd("~/Desktop/Stats348/Store-Item-Demand")
train <- vroom("train.csv")
test <- vroom("test.csv")
# Filter for Specific Store-Item Combinations and Rename Columns
# Store 3, Item 23
storeItemTrain_1 <- train %>%
filter(store == 3, item == 23) %>%
rename(y = sales) %>%
mutate(date = as.Date(date))
storeItemTest_1 <- test %>%
filter(store == 3, item == 23) %>%
mutate(date = as.Date(date))
# Store 9, Item 47
storeItemTrain_2 <- train %>%
filter(store == 9, item == 47) %>%
rename(y = sales) %>%
mutate(date = as.Date(date))
storeItemTest_2 <- test %>%
filter(store == 9, item == 47) %>%
mutate(date = as.Date(date))
# Define the Prophet Model
prophet_model <- prophet_reg() %>%
set_engine("prophet") %>%
set_mode("regression")
# Create Cross-Validation Plans
cv_plan_1 <- time_series_cv(
data = storeItemTrain_1,
initial = "3 years",
assess = "3 months",
skip = "1 month",
cumulative = TRUE
)
cv_plan_2 <- time_series_cv(
data = storeItemTrain_2,
initial = "3 years",
assess = "3 months",
skip = "1 month",
cumulative = TRUE
)
# Define Workflows and Fit Models with Cross-Validation
# For Store 3, Item 23
workflow_1 <- workflow() %>%
add_model(prophet_model) %>%
add_formula(y ~ date) %>%
fit_resamples(cv_plan_1)
# For Store 9, Item 47
workflow_2 <- workflow() %>%
add_model(prophet_model) %>%
add_formula(y ~ date) %>%
fit_resamples(cv_plan_2)
# Collect and Visualize Cross-Validation Predictions
cv_results_1 <- collect_predictions(workflow_1)
cv_results_2 <- collect_predictions(workflow_2)
# Overlay predictions with true observations
cv_plot_1 <- cv_results_1 %>%
ggplot(aes(x = .row_number, y = .pred)) +
geom_line(color = "blue") +
geom_point(aes(y = .actual), color = "red") +
ggtitle("CV Predictions - Store 3, Item 23")
cv_plot_2 <- cv_results_2 %>%
ggplot(aes(x = .row_number, y = .pred)) +
geom_line(color = "blue") +
geom_point(aes(y = .actual), color = "red") +
ggtitle("CV Predictions - Store 9, Item 47")
# Refit the Best Model to the Entire Data and Forecast
final_fit_1 <- prophet_model %>%
fit(y ~ date, data = storeItemTrain_1)
final_fit_2 <- prophet_model %>%
fit(y ~ date, data = storeItemTrain_2)
# Forecast the Next 3 Months
future_dates_1 <- seq(max(storeItemTrain_1$date) + 1, by = "month", length.out = 3)
future_1 <- tibble(date = future_dates_1)
future_dates_2 <- seq(max(storeItemTrain_2$date) + 1, by = "month", length.out = 3)
future_2 <- tibble(date = future_dates_2)
forecast_1 <- predict(final_fit_1, future_1)
forecast_2 <- predict(final_fit_2, future_2)
# Create Forecast Plots
forecast_plot_1 <- future_1 %>%
bind_cols(forecast_1) %>%
ggplot(aes(x = date, y = .pred)) +
geom_line() +
ggtitle("3-Month Forecast - Store 3, Item 23")
forecast_plot_2 <- future_2 %>%
bind_cols(forecast_2) %>%
ggplot(aes(x = date, y = .pred)) +
geom_line() +
ggtitle("3-Month Forecast - Store 9, Item 47")
# Combine Plots into a 4-Panel Layout
final_plot <- (cv_plot_1 + cv_plot_2) / (forecast_plot_1 + forecast_plot_2)
print(final_plot)
# Load Necessary Libraries
library(tidyverse)
library(tidymodels)
library(vroom)
library(modeltime)
library(timetk)
library(patchwork)
# Set Working Directory and Load Data
setwd("~/Desktop/Stats348/Store-Item-Demand")
train <- vroom("train.csv")
test <- vroom("test.csv")
# Filter for Specific Store-Item Combinations and Rename Columns
# Store 3, Item 23
storeItemTrain_1 <- train %>%
filter(store == 3, item == 23) %>%
rename(y = sales) %>%
mutate(date = as.Date(date))
storeItemTest_1 <- test %>%
filter(store == 3, item == 23) %>%
mutate(date = as.Date(date))
# Store 9, Item 47
storeItemTrain_2 <- train %>%
filter(store == 9, item == 47) %>%
rename(y = sales) %>%
mutate(date = as.Date(date))
storeItemTest_2 <- test %>%
filter(store == 9, item == 47) %>%
mutate(date = as.Date(date))
# Define the Prophet Model
prophet_model <- prophet_reg() %>%
set_engine("prophet") %>%
set_mode("regression")
# Create Cross-Validation Plans
cv_plan_1 <- time_series_cv(
data = storeItemTrain_1,
initial = "3 years",
assess = "3 months",
skip = "1 month",
cumulative = TRUE
)
cv_plan_2 <- time_series_cv(
data = storeItemTrain_2,
initial = "3 years",
assess = "3 months",
skip = "1 month",
cumulative = TRUE
)
# Define Workflows and Fit Models with Cross-Validation
# For Store 3, Item 23
workflow_1 <- workflow() %>%
add_model(prophet_model) %>%
add_formula(y ~ date) %>%
fit_resamples(cv_plan_1)
library(prophet)
# Set Working Directory and Load Data
setwd("~/Desktop/Stats348/Store-Item-Demand")
train <- vroom("train.csv")
test <- vroom("test.csv")
# Filter for Specific Store-Item Combinations and Rename Columns
# Store 3, Item 23
storeItemTrain_1 <- train %>%
filter(store == 3, item == 23) %>%
rename(y = sales) %>%
mutate(date = as.Date(date))
storeItemTest_1 <- test %>%
filter(store == 3, item == 23) %>%
mutate(date = as.Date(date))
# Load Necessary Libraries
library(tidyverse)
library(tidymodels)
library(vroom)
library(modeltime)
library(timetk)
library(patchwork)
library(prophet)
# Set Working Directory and Load Data
setwd("~/Desktop/Stats348/Store-Item-Demand")
train <- vroom("train.csv")
test <- vroom("test.csv")
# Filter for Specific Store-Item Combinations and Rename Columns
# Store 3, Item 23
storeItemTrain_1 <- train %>%
filter(store == 3, item == 23) %>%
rename(y = sales) %>%
mutate(date = as.Date(date))
storeItemTest_1 <- test %>%
filter(store == 3, item == 23) %>%
mutate(date = as.Date(date))
# Store 9, Item 47
storeItemTrain_2 <- train %>%
filter(store == 9, item == 47) %>%
rename(y = sales) %>%
mutate(date = as.Date(date))
storeItemTest_2 <- test %>%
filter(store == 9, item == 47) %>%
mutate(date = as.Date(date))
# Define the Prophet Model
prophet_model <- prophet_reg() %>%
set_engine("prophet") %>%
set_mode("regression")
# Create Cross-Validation Plans
cv_plan_1 <- time_series_cv(
data = storeItemTrain_1,
initial = "3 years",
assess = "3 months",
skip = "1 month",
cumulative = TRUE
)
cv_plan_2 <- time_series_cv(
data = storeItemTrain_2,
initial = "3 years",
assess = "3 months",
skip = "1 month",
cumulative = TRUE
)
# Define Workflows and Fit Models with Cross-Validation
# For Store 3, Item 23
workflow_1 <- workflow() %>%
add_model(prophet_model) %>%
add_formula(y ~ date) %>%
fit_resamples(cv_plan_1)
