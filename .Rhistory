install.packages("maxLik")
batavg <- read.csv("FirstName,LastName,Team,League,AtBats,BattingAverage,SalaryMillions
Spencer,Torkelson,DET,AL,360,0.203,0.7
Darin,Ruf,SFN,NL,268,0.216,3
Adam,Frazier,SEA,AL,541,0.238,7.5
Cavan,Biggio,TOR,AL,257,0.202,2.1225
Bryce,Harper,PHI,NL,370,0.286,26
Eric,Haase,DET,AL,323,0.254,0.7104
Jose,Abreu,CHA,AL,601,0.304,18
Austin,Hedges,CLE,AL,294,0.163,4
Corey,Seager,TEX,AL,593,0.245,32.5
Teoscar,Hernandez,TOR,AL,499,0.267,10.65
Byron,Buxton,MIN,AL,340,0.224,9
Salvador,Perez,KCA,AL,445,0.254,18
Andrew,Velazquez,LAA,AL,322,0.196,0.7
Eric,Hosmer,SDN,NL,335,0.272,20
Evan,Longoria,SFN,NL,266,0.244,19.5
Juan,Yepez,SLN,NL,253,0.253,0.7")
library(maxLik)
batavg <- read_csv(file = "FirstName,LastName,Team,League,AtBats,BattingAverage,SalaryMillions
Spencer,Torkelson,DET,AL,360,0.203,0.7
Darin,Ruf,SFN,NL,268,0.216,3
Adam,Frazier,SEA,AL,541,0.238,7.5
Cavan,Biggio,TOR,AL,257,0.202,2.1225
Bryce,Harper,PHI,NL,370,0.286,26
Eric,Haase,DET,AL,323,0.254,0.7104
Jose,Abreu,CHA,AL,601,0.304,18
Austin,Hedges,CLE,AL,294,0.163,4
Corey,Seager,TEX,AL,593,0.245,32.5
Teoscar,Hernandez,TOR,AL,499,0.267,10.65
Byron,Buxton,MIN,AL,340,0.224,9
Salvador,Perez,KCA,AL,445,0.254,18
Andrew,Velazquez,LAA,AL,322,0.196,0.7
Eric,Hosmer,SDN,NL,335,0.272,20
Evan,Longoria,SFN,NL,266,0.244,19.5
Juan,Yepez,SLN,NL,253,0.253,0.7")
library(tidyverse)
batavg <- read_csv(file = "FirstName,LastName,Team,League,AtBats,BattingAverage,SalaryMillions
Spencer,Torkelson,DET,AL,360,0.203,0.7
Darin,Ruf,SFN,NL,268,0.216,3
Adam,Frazier,SEA,AL,541,0.238,7.5
Cavan,Biggio,TOR,AL,257,0.202,2.1225
Bryce,Harper,PHI,NL,370,0.286,26
Eric,Haase,DET,AL,323,0.254,0.7104
Jose,Abreu,CHA,AL,601,0.304,18
Austin,Hedges,CLE,AL,294,0.163,4
Corey,Seager,TEX,AL,593,0.245,32.5
Teoscar,Hernandez,TOR,AL,499,0.267,10.65
Byron,Buxton,MIN,AL,340,0.224,9
Salvador,Perez,KCA,AL,445,0.254,18
Andrew,Velazquez,LAA,AL,322,0.196,0.7
Eric,Hosmer,SDN,NL,335,0.272,20
Evan,Longoria,SFN,NL,266,0.244,19.5
Juan,Yepez,SLN,NL,253,0.253,0.7")
ba <- batavg$BattingAverage
loglik <- function(theta, x){
if (any(theta = 0))
NA
else
dbeta(x, theta[1], theta[2], log = TRUE)
}
ml <- macLik(loglik,
start = c(shape1 = .5, shape2 =.5),
x=ba)
ml <- maxLik(loglik,
start = c(shape1 = .5, shape2 =.5),
x=ba)
ml
alpha.hat <- coef(ml)[1]
beta.hat <- coef(ml)[2]
library(maxLik)
library(tidyverse)
batavg <- read_csv(file = "FirstName,LastName,Team,League,AtBats,BattingAverage,SalaryMillions
Spencer,Torkelson,DET,AL,360,0.203,0.7
Darin,Ruf,SFN,NL,268,0.216,3
Adam,Frazier,SEA,AL,541,0.238,7.5
Cavan,Biggio,TOR,AL,257,0.202,2.1225
Bryce,Harper,PHI,NL,370,0.286,26
Eric,Haase,DET,AL,323,0.254,0.7104
Jose,Abreu,CHA,AL,601,0.304,18
Austin,Hedges,CLE,AL,294,0.163,4
Corey,Seager,TEX,AL,593,0.245,32.5
Teoscar,Hernandez,TOR,AL,499,0.267,10.65
Byron,Buxton,MIN,AL,340,0.224,9
Salvador,Perez,KCA,AL,445,0.254,18
Andrew,Velazquez,LAA,AL,322,0.196,0.7
Eric,Hosmer,SDN,NL,335,0.272,20
Evan,Longoria,SFN,NL,266,0.244,19.5
Juan,Yepez,SLN,NL,253,0.253,0.7")
ba <- batavg$BattingAverage
loglik <- function(theta, x){
if (any(theta = 0))
NA
else
dbeta(x, theta[1], theta[2], log = TRUE)
}
ml <- maxLik(loglik,
start = c(shape1 = .5, shape2 =.5),
x=ba)
ml
loglik <- function(theta, x){
if (any(theta <= 0))
NA
else
dbeta(x, theta[1], theta[2], log = TRUE)
}
ml <- maxLik(loglik,
start = c(shape1 = .5, shape2 =.5),
x=ba)
ml
loglik <- function(theta, x){
if (any(theta <= 0))
NA
else
dbeta(x, theta[1], theta[2], log = TRUE)
}
ml <- maxLik(loglik,
start = c(shape1 = .5, shape2 =.5),
x=ba)
ml
alpha.hat <- coef(ml)[1]
beta.hat <- coef(ml)[2]
alpha.hat
beta.hat
setwd("~/Desktop/Stats348/Store-Item-Demand")
library(modeltime)
library(timetk)
library(tidyverse)
library(tidymodels)
library(embed)
library(vroom)
library(workflows)
library(forecast)
library(patchwork)
library(ranger)
library(auto_arima)
library(plotly)
library(prophet)
setwd("~/Desktop/Stats348/Store-Item-Demand")
fulltrain <- vroom("./train.csv")
fulltest <- vroom("./test.csv")
library(modeltime)
library(timetk)
library(tidyverse)
library(tidymodels)
library(embed)
library(vroom)
install.packages("ranger")
install.packages("plotly")
library(modeltime)
library(timetk)
library(tidyverse)
library(tidymodels)
library(embed)
library(vroom)
library(workflows)
library(forecast)
library(patchwork)
library(ranger)
library(auto_arima)
install.packages("auto_arima")
install.packages("arima2")
library(plotly)
library(prophet)
setwd("~/Desktop/Stats348/Store-Item-Demand")
fulltrain <- vroom("./train.csv")
fulltest <- vroom("./test.csv")
train <- fulltrain %>% filter(store == 5, item == 25)
test <- fulltest %>% filter(store == 5, item == 25)
cv_split <- time_series_split(train, assess="3 months", cumulative=TRUE)
cv_split %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
prophet_model <- prophet_reg() %>%
set_engine('prophet') %>%
fit(sales ~ date, data=training(cv_split))
cv_results <- modeltime_calibrate(prophet_model, new_data = testing(cv_split))
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
p1 <- cv_results %>% modeltime_forecast(new_data = testing(cv_split),
actual_data = training(cv_split)) %>%
plot_modeltime_forecast(.interactive = FALSE, .title = 'CV Preds: Store 5 Item 25')
full_fit <- cv_results %>%
modeltime_refit(data = train)
p2 <- full_fit %>%
modeltime_forecast(new_data = test,
actual_data = train) %>%
plot_modeltime_forecast(.interactive=FALSE, .title = '3 Month Forecast: Store 5 Item 25')
train <- fulltrain %>% filter(store == 2, item == 15)
test <- fulltest %>% filter(store == 2, item == 15)
cv_split <- time_series_split(train, assess="3 months", cumulative=TRUE)
cv_split %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
prophet_model <- prophet_reg() %>%
set_engine('prophet') %>%
fit(sales ~ date, data=training(cv_split))
cv_results <- modeltime_calibrate(prophet_model, new_data = testing(cv_split))
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
p3 <- cv_results %>% modeltime_forecast(new_data = testing(cv_split),
actual_data = training(cv_split)) %>%
plot_modeltime_forecast(.interactive = FALSE, .title = 'CV Preds: Store 2 Item 15')
full_fit <- cv_results %>%
modeltime_refit(data = train)
p4 <- full_fit %>%
modeltime_forecast(new_data = test,
actual_data = train) %>%
plot_modeltime_forecast(.interactive=FALSE, .title = '3 Month Forecast: Store 2 Item 15')
plotly::subplot(p1, p3, p2, p4, nrows = 2, margin = 0.1) %>% layout(showlegend = FALSE, title = '', annotations = list(
list(
x = 0.2,
y = 1.0,
text = "CV Preds: Store 5 Item 25",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "CV Preds: Store 2 Item 15",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "3 Month Forecast: Store 5 Item 25",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "3 Month Forecast: Store 2 Item 15",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)))
library(modeltime)
library(timetk)
library(tidyverse)
library(tidymodels)
library(embed)
library(vroom)
library(workflows)
library(forecast)
library(patchwork)
library(ranger)
library(auto_arima)
library(plotly)
library(prophet)
setwd("~/Desktop/Stats348/Store-Item-Demand")
fulltrain <- vroom("./train.csv")
fulltest <- vroom("./test.csv")
train <- fulltrain %>% filter(store == 3, item == 23)
test <- fulltest %>% filter(store == 9, item == 47)
cv_split <- time_series_split(train, assess="3 months", cumulative=TRUE)
cv_split %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
prophet_model <- prophet_reg() %>%
set_engine('prophet') %>%
fit(sales ~ date, data=training(cv_split))
cv_results <- modeltime_calibrate(prophet_model, new_data = testing(cv_split))
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
p1 <- cv_results %>% modeltime_forecast(new_data = testing(cv_split),
actual_data = training(cv_split)) %>%
plot_modeltime_forecast(.interactive = FALSE, .title = 'CV Preds: Store 5 Item 25')
full_fit <- cv_results %>%
modeltime_refit(data = train)
p2 <- full_fit %>%
modeltime_forecast(new_data = test,
actual_data = train) %>%
plot_modeltime_forecast(.interactive=FALSE, .title = '3 Month Forecast: Store 5 Item 25')
train <- fulltrain %>% filter(store == 2, item == 15)
test <- fulltest %>% filter(store == 2, item == 15)
cv_split <- time_series_split(train, assess="3 months", cumulative=TRUE)
cv_split %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
prophet_model <- prophet_reg() %>%
set_engine('prophet') %>%
fit(sales ~ date, data=training(cv_split))
cv_results <- modeltime_calibrate(prophet_model, new_data = testing(cv_split))
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
p3 <- cv_results %>% modeltime_forecast(new_data = testing(cv_split),
actual_data = training(cv_split)) %>%
plot_modeltime_forecast(.interactive = FALSE, .title = 'CV Preds: Store 2 Item 15')
full_fit <- cv_results %>%
modeltime_refit(data = train)
p4 <- full_fit %>%
modeltime_forecast(new_data = test,
actual_data = train) %>%
plot_modeltime_forecast(.interactive=FALSE, .title = '3 Month Forecast: Store 2 Item 15')
plotly::subplot(p1, p3, p2, p4, nrows = 2, margin = 0.1) %>% layout(showlegend = FALSE, title = '', annotations = list(
list(
x = 0.2,
y = 1.0,
text = "CV Preds: Store 5 Item 25",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "CV Preds: Store 2 Item 15",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "3 Month Forecast: Store 5 Item 25",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "3 Month Forecast: Store 2 Item 15",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)))
plotly::subplot(p1, p3, p2, p4, nrows = 2, margin = 0.1) %>% layout(showlegend = FALSE, title = '', annotations = list(
list(
x = 0.2,
y = 1.0,
text = "CV Preds: Store 3 Item 23",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "CV Preds: Store 9 Item 47",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "3 Month Forecast: Store 3 Item 23",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "3 Month Forecast: Store 9 Item 47",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)))
library(modeltime)
library(timetk)
library(tidyverse)
library(tidymodels)
library(embed)
library(vroom)
library(workflows)
library(forecast)
library(patchwork)
library(ranger)
library(auto_arima)
library(modeltime)
library(timetk)
library(tidyverse)
library(tidymodels)
library(embed)
library(vroom)
library(workflows)
library(forecast)
library(patchwork)
library(ranger)
library(plotly)
library(prophet)
setwd("~/Desktop/Stats348/Store-Item-Demand")
fulltrain <- vroom("./train.csv")
fulltest <- vroom("./test.csv")
train <- fulltrain %>% filter(store == 3, item == 23)
test <- fulltest %>% filter(store == 9, item == 47)
cv_split <- time_series_split(train, assess="3 months", cumulative=TRUE)
cv_split %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
prophet_model <- prophet_reg() %>%
set_engine('prophet') %>%
fit(sales ~ date, data=training(cv_split))
cv_results <- modeltime_calibrate(prophet_model, new_data = testing(cv_split))
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
p1 <- cv_results %>% modeltime_forecast(new_data = testing(cv_split),
actual_data = training(cv_split)) %>%
plot_modeltime_forecast(.interactive = FALSE, .title = 'CV Preds: Store 5 Item 25')
full_fit <- cv_results %>%
modeltime_refit(data = train)
p2 <- full_fit %>%
modeltime_forecast(new_data = test,
actual_data = train) %>%
plot_modeltime_forecast(.interactive=FALSE, .title = '3 Month Forecast: Store 5 Item 25')
## Store-Item Combo 2:
train <- fulltrain %>% filter(store == 2, item == 15)
test <- fulltest %>% filter(store == 2, item == 15)
cv_split <- time_series_split(train, assess="3 months", cumulative=TRUE)
cv_split %>%  tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive=FALSE)
prophet_model <- prophet_reg() %>%
set_engine('prophet') %>%
fit(sales ~ date, data=training(cv_split))
cv_results <- modeltime_calibrate(prophet_model, new_data = testing(cv_split))
cv_results %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE
)
p3 <- cv_results %>% modeltime_forecast(new_data = testing(cv_split),
actual_data = training(cv_split)) %>%
plot_modeltime_forecast(.interactive = FALSE, .title = 'CV Preds: Store 2 Item 15')
full_fit <- cv_results %>%
modeltime_refit(data = train)
p4 <- full_fit %>%
modeltime_forecast(new_data = test,
actual_data = train) %>%
plot_modeltime_forecast(.interactive=FALSE, .title = '3 Month Forecast: Store 2 Item 15')
plotly::subplot(p1, p3, p2, p4, nrows = 2, margin = 0.1) %>% layout(showlegend = FALSE, title = '', annotations = list(
list(
x = 0.2,
y = 1.0,
text = "CV Preds: Store 3 Item 23",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "CV Preds: Store 9 Item 47",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "3 Month Forecast: Store 3 Item 23",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "3 Month Forecast: Store 9 Item 47",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)))
